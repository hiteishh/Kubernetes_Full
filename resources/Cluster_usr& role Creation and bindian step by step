K9s CLuster role binding step by step

#Need to generet key with below command
openssl genrsa -out test.key 2048

##Certificate sign key request for user//// 0=dev dev is group where we can adduser to handle
sudo openssl req -new -key test.key -out test.key -out kumuda.csr -subj "/CN=kumuda/O=dev/O=example.com"


Sign certificate from ca authrity  and generate 
openssl x509 -req -CA ~/.minikube/ca.crt -CAkey ~/.minikube/ca.key -CAcreateserial -days 730 -in kumuda.csr -out kumuda.crt


Adding user to cluster context
kubectl config set-credentials kumuda --client-certificate=kumuda.crt --client-key=test.key


Adduser context 
kubectl config set-context master-minikube --cluster=minikube --user=kumuda
kubectl config get-contexts
kubectl config use-context master-minikube


#####Role creation ####
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pod-reader
rules:
- apiGroups: [""] # "" indicates the core API group
  verbs: ["get", "watch", "list"]
  resources: ["pods", "pods/log"]
  # resourceNames: ["nginx"]
  
  
  
 ### role-binding ###
 apiVersion: rbac.authorization.k8s.io/v1
# This role binding allows user "pavan" to read pods in the "default" namespace.
# You need to already have a Role named "pod-reader" in that namespace.
kind: RoleBinding
metadata:
  name: read-pods
subjects:
# You can specify more than one "subject"
- kind: User
  name: master # "name" is case sensitive
  apiGroup: rbac.authorization.k8s.io
#- kind: ServiceAccount
#  name: test-sa
roleRef:  
  # "roleRef" specifies the binding to a Role / ClusterRole
  kind: Role #this must be Role or ClusterRole
  name: pod-reader # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io
# roleRef:
#   kind: ClusterRole
#   name: secret-reader
#   apiGroup: rbac.authorization.k8s.io


### cluster role ###
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pod-reader
rules:
- apiGroups: [""]
  # at the HTTP level, the name of the resource for accessing Secret
  # objects is "secrets"
  verbs: ["get", "watch", "list"]
  resources: ["pods", "pods/log"]


### cluster role binding ##
apiVersion: rbac.authorization.k8s.io/v1
# This cluster role binding allows anyone in the "dev" group to read secrets in any namespace.
kind: ClusterRoleBinding
metadata:
  name: pod-reader-global
subjects:
- kind: User
  name: kumuda # "name" is case sensitive
  apiGroup: rbac.authorization.k8s.io
- kind: Group
  name: dev # "name" is case sensitive
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io
